# encoding: utf-8
# 2024 R1
import os
user_home = os.path.expanduser('~')
LRIPath = os.path.join(user_home, "Documents", "LRI CFD")
parasolidpath = os.path.join(LRIPath,"NX","EXPORTS")
parasolidfiles = [f for f in os.listdir(parasolidpath) if os.path.isfile(parasolidpath+'/'+f)]
geometrypath = str(os.path.join(LRIPath,"ANSYS","GEOMETRY","Geom.pmdb"))#.replace('\\','\\\\')
scriptpath = os.path.join(LRIPath,"ANSYS","SCRIPTS","fintabdiscovery.scscript")
importgeometrycommand = r"""(%py-exec "workflow.TaskObject['Import Geometry'].Arguments.set_state({r'FileName': r'""" + geometrypath + r"""',r'ImportCadPreferences': {r'MaxFacetLength': 0,},r'LengthUnit': r'm',})")"""   #please do not look into this command. Idk how it works


for i in range(1): 
    SetScriptVersion(Version="24.1.144")
    template1 = GetTemplate(TemplateName="Geometry")
    system1 = template1.CreateSystem()
    geometry1 = system1.GetContainer(ComponentName="Geometry")
    geometry1.SetFile(FilePath=os.path.join(parasolidpath,parasolidfiles[i]))
    geometry1.Edit(IsDiscoveryGeometry=True)


    geometry1.RunScript(ScriptFile=scriptpath,GeometryContainer="Geometry",useAsMacro="false")


    template2 = GetTemplate(TemplateName="FLTG")
    system2 = template2.CreateSystem(
        Position="Right",
        RelativeTo=system1)
    geometryComponent1 = system1.GetComponent(Name="Geometry")
    meshComponent1 = system2.GetComponent(Name="Mesh")
    geometryComponent1.TransferData(TargetComponent=meshComponent1)
    setup1 = system2.GetContainer(ComponentName="Setup")
    fluentLauncherSettings1 = setup1.GetFluentLauncherSettings()
    fluentLauncherSettings1.SetEntityProperties(Properties=Set(Precision="Double", EnvPath={}, RunParallel=True, NumberOfProcessorsMeshing=8, NumberOfProcessors=8))
    tGridData1 = GetDataEntity("/Mesh/TGridData:TGridData")
    tGridData1.SetEntityProperties(Properties=Set(RunParallel=True, NumberOfProcs=8))
    mesh1 = system2.GetContainer(ComponentName="Mesh")
    Fluent.Edit(Container=mesh1)
    setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
    meshComponent1.Refresh()
    setup1.SendCommand(Command='/file/set-tui-version "24.1"(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 0)')
    setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.LengthUnit.set_state(r'm')\")")
    setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.AreaUnit.set_state(r'm^2')\")")
    setup1.SendCommand(Command="(%py-exec \"meshing.GlobalSettings.VolumeUnit.set_state(r'm^3')\")")
    
    
    setup1.SendCommand(Command=importgeometrycommand)
    setup1.SendCommand(Command="(newline)")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].Arguments.set_state({r'AddChild': r'yes',r'BOICellsPerGap': 1,r'BOICurvatureNormalAngle': 18,r'BOIExecution': r'Face Size',r'BOIFaceLabelList': [r'fins'],r'BOIGrowthRate': 1.2,r'BOIZoneorLabel': r'label',})\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate(DeferUpdate=False)\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Surface Mesh'].Execute()\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=False)\")")
    setup1.SendCommand(Command='(cx-gui-do cx-set-toggle-button2 "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*CheckButton5(Insert Clipping Planes)" #t)(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Clipping Planes)*CheckButton5(Insert Clipping Planes)")')
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'NonConformal': r'No',r'SetupType': r'The geometry consists of both fluid and solid regions and/or voids',})\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=True)\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Arguments.set_state({r'CappingRequired': r'No',r'NonConformal': r'No',r'SetupType': r'The geometry consists of both fluid and solid regions and/or voids',r'WallToInternal': r'Yes',})\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Describe Geometry'].Execute()\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Boundaries'].Execute()\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Create Regions'].Execute()\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Update Regions'].Execute()\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].Arguments.set_state({r'LocalPrismPreferences': {r'Continuous': r'Continuous',},})\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Add Boundary Layers'].AddChildAndUpdate(DeferUpdate=False)\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Arguments.set_state({r'VolumeFill': r'poly-hexcore',})\")")
    setup1.SendCommand(Command="(%py-exec \"workflow.TaskObject['Generate the Volume Mesh'].Execute()\")")
    setup1.SendCommand(Command="(cx-use-window-id 51)(cx-set-camera-relative '(0.1657 -0.434334 0.0303355) '(0 0 0) '(0.656072 0.280648 0.500718) 0 0)")
    setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame2(Task Page)*Table1*Table3(Solution)*PushButton1(Switch to Solution)")(cx-gui-do cx-activate-item "Question*OK")')
    
    #setup1.SendCommand(Command="(%py-exec \"workflow.SaveWorkflow(FilePath=r'C:\\Users\\eqlewis2\\AppData\\Local\\Temp\\WB_eqlewis2_19968_14\\wbnew_files\\dp0\\FLTG\\Fluent\\FLTG_workflow_files\\FLTG.wft')\")")
    
    setup1.SendCommand(Command='(cx-gui-do cx-activate-tab-index "NavigationPane*Frame1(TreeTab)" 1)')
    setup1.SendCommand(Command="(newline)")
    setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=27)"))')
    setup1.SendCommand(Command='(cx-gui-do cx-set-list-tree-selections "NavigationPane*Frame2*Table1*List_Tree2" (list "Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=27)"))(cx-gui-do cx-activate-item "NavigationPane*Frame2*Table1*List_Tree2")')
    setup1.SendCommand(Command="(cx-gui-do cx-set-list-tree-selections \"NavigationPane*Frame2*Table1*List_Tree2\" (list \"Setup|Boundary Conditions|Inlet|inlet (velocity-inlet, id=27)\"))(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 1)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 2)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 3)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 4)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 5)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 6)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 7)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 8)(cx-gui-do cx-activate-tab-index \"Velocity Inlet*Frame2*Frame2\" 0)(cx-gui-do cx-enable-apply-button \"Velocity Inlet\")(cx-gui-do cx-set-expression-entry \"Velocity Inlet*Frame2*Frame2*Frame1(Momentum)*Table1*Table9*ExpressionEntry1(Velocity Magnitude)\" '(\"200\" . 0))(cx-gui-do cx-activate-item \"Velocity Inlet*PanelButtons*PushButton1(OK)\")")
    setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Velocity Inlet*PanelButtons*PushButton2(Cancel)")')
    setup1.SendCommand(Command="(cx-gui-do cx-set-expression-entry \"Ribbon*Frame1*Frame6(Solution)*Table1*Table3(Run Calculation)*Table6*ExpressionEntry3(Time Scale Factor)\" '(\"1\" . 0))(cx-gui-do cx-set-integer-entry \"Ribbon*Frame1*Frame6(Solution)*Table1*Table3(Run Calculation)*Table6*IntegerEntry16(No  of Iterations)\" 300)(cx-gui-do cx-activate-item \"Ribbon*Frame1*Frame6(Solution)*Table1*Table3(Run Calculation)*Table6*IntegerEntry16(No  of Iterations)\")")
    setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame6(Solution)*Table1*Table3(Initialization)*PushButton6(Initialize)")')
    setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Ribbon*Frame1*Frame6(Solution)*Table1*Table3(Run Calculation)*PushButton7(Calculate)")')
    setup1.SendCommand(Command='(cx-gui-do cx-activate-item "Information*OK")')
